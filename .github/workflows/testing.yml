# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Golang with cache
      uses: magnetikonline/action-golang-cache@v4
      with:
        go-version-file: go.mod

    - name: Build
      run: go build -o /usr/local/bin/app -v .

    - name: Test
      run: go test -v ./...

    - name: ENV vars
      env:
          DB_PWD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        echo $DB_PWD > ./config/db/pg_password.txt
        echo "DB_NAME=$DB_NAME" > ./.env.testing
        echo "DB_USER=$DB_USER" >> ./.env.testing
        echo "ADMIN_PASSWORD=$ADMIN_PASSWORD" >> ./.env.testing
        echo "DB_HOST=$DB_HOST" >> ./.env.testing
        echo "DB_PORT=$DB_PORT" >> ./.env.testing
        echo "env file len $(expr length "$(cat ./.env.testing)")"

    - name: Docker Layer Caching2
      uses: jpribyl/action-docker-layer-caching@v0.1.0

    - name: Run docker and app
      run: |
        ./run_dev.sh ./.env.testing ci
        docker ps
        
    - name: E2E test
      run: go run ./e2e -t 180
