version: "3.8"
services:
  webapp:
    image: kholinchen/dproject:$APP_VERSION
    container_name: "webapp-app-1"
    restart: always
    environment:
      DB_CONTAINER_NAME: "webapp-db-1"
      DB_HOST: "db"
      DB_PORT: 5432
      DOMAIN_NAME: $DOMAIN_NAME
      DB_NAME: $DB_NAME
      DB_USER: $DB_USER
      ADMIN_PASSWORD: $ADMIN_PASSWORD
      ADMIN_EMAIL: $ADMIN_EMAIL
      USER_DEFAULT_PASSWORD: $USER_DEFAULT_PASSWORD
      APP_PORT: $APP_PORT
      APP_OUTER_PORT: $APP_OUTER_PORT
      NGINX_PORT: $NGINX_PORT
      NGINX_SSL_PORT: $NGINX_SSL_PORT
      SESSION_SECRET: $SESSION_SECRET
      CSRF_SECRET: $CSRF_SECRET
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
      REDIS_USER: $REDIS_USER
      REDIS_PASSWORD: $REDIS_PASSWORD
      REDISCLI_AUTH: $REDISCLI_AUTH
      SMTP_SERVER: $SMTP_SERVER
      SMTP_SERVER_PORT: $SMTP_SERVER_PORT
      SMTP_USER: $SMTP_USER
      SMTP_PASSWORD: $SMTP_PASSWORD
      GOOGLE_CLIENT_ID: $GOOGLE_CLIENT_ID
      GOOGLE_CLIENT_SECRET: $GOOGLE_CLIENT_SECRET
      GITHUB_CLIENT_ID: $GITHUB_CLIENT_ID
      GITHUB_CLIENT_SECRET: $GITHUB_CLIENT_SECRET
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - db
      - redis
  db:
    image: postgres:15.4
    container_name: "local-webapp-db"
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./config/db/initdb:/docker-entrypoint-initdb.d:ro
      - ./config/db:/tmp/data:ro
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=$PG_PASSWORD
      - DB_NAME=$DB_NAME
      - DB_USER=$DB_USER
      - ADMIN_PASSWORD=$ADMIN_PASSWORD
      - PGTZ=UTC
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  nginx:
    image: nginx:1.25.2-alpine
    container_name: "local-nginx"
    restart: always
    environment:
      - APP_LOCAL_HOST=webapp
      - APP_PORT=$APP_PORT
      # - DOMAIN_NAME=$DOMAIN_NAME
      - SECOND_LEVEL_DOMAIN_NAME=$SECOND_LEVEL_DOMAIN_NAME
    volumes:
      - ./static:/data/static
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/templates/webapp.conf.template:/etc/nginx/templates/webapp.conf.template:ro
      - ./nginx/logs:/etc/nginx/logs
      # - ./nginx/certbot/conf:/etc/letsencrypt
      # - ./nginx/certbot/www:/var/www/certbot
      # - ./nginx/40-reload-cron.sh:/docker-entrypoint.d/40-reload-cron.sh
      - /etc/letsencrypt:/etc/letsencrypt
    ports:
      - $NGINX_SSL_PORT:443
      - $NGINX_PORT:80
    depends_on:
      - webapp
  goaccess:
    image: allinurl/goaccess:1.7.2
    container_name: "local-goaccess"
    restart: always
    entrypoint: "sh -c \"/bin/goaccess /data/logs/access.log -o /data/static/report.html --real-time-html --port=9880 --ssl-cert=$$SSL_CERT --ssl-key=$$SSL_KEY\""
    environment:
      - TZ="China/Shanghai"
      - SSL_CERT=/etc/letsencrypt/live/${SECOND_LEVEL_DOMAIN_NAME}/fullchain.pem
      - SSL_KEY=/etc/letsencrypt/live/${SECOND_LEVEL_DOMAIN_NAME}/privkey.pem
    volumes:
      - /var/www/goaccess:/var/www/goaccess:rw
      - ./geoip/GeoLite2-City.mmdb:/data/GeoLite2-City.mmdb
      - /etc/letsencrypt:/etc/letsencrypt
      - ./goaccess.conf:/etc/goaccess/goaccess.conf
      - ./nginx/logs:/data/logs
      - ./manage_static:/data/static
    ports:
      - "9880:9880"
  # certbot:
  #   image: certbot/certbot
  #   container_name: "local-certbot"
  #   restart: always
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #   volumes:
  #     - ./nginx/certbot/conf:/etc/letsencrypt
  #     - ./nginx/certbot/www:/var/www/certbot
  
  redis:
    image: kholinchen/credis:latest
    container_name: "local-redis"
    environment:
      - REDIS_USER=$REDIS_USER
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - REDISCLI_AUTH=$REDISCLI_AUTH
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:
  redis-data:
