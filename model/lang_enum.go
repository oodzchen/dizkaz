// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"fmt"
	"strings"

	"github.com/nicksnyder/go-i18n/v2/i18n"
	i18nc "github.com/oodzchen/dproject/i18n"
)

const (
	// LangEn is a Lang of type en.
	// English
	LangEn Lang = "en"
	// LangZhHans is a Lang of type zh-Hans.
	// 简体中文
	LangZhHans Lang = "zh-Hans"
	// LangZhHant is a Lang of type zh-Hant.
	// 繁體中文
	LangZhHant Lang = "zh-Hant"
	// LangJa is a Lang of type ja.
	// 日本語
	LangJa Lang = "ja"
)

var ErrInvalidLang = fmt.Errorf("not a valid Lang, try [%s]", strings.Join(_LangNames, ", "))

var _LangNames = []string{
	string(LangEn),
	string(LangZhHans),
	string(LangZhHant),
	string(LangJa),
}

// LangNames returns a list of possible string values of Lang.
func LangNames() []string {
	tmp := make([]string, len(_LangNames))
	copy(tmp, _LangNames)
	return tmp
}

// LangValues returns a list of the values for Lang
func LangValues() []Lang {
	return []Lang{
		LangEn,
		LangZhHans,
		LangZhHant,
		LangJa,
	}
}

// String implements the Stringer interface.
func (x Lang) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Lang) IsValid() bool {
	_, err := ParseLang(string(x))
	return err == nil
}

var _LangValue = map[string]Lang{
	"en":      LangEn,
	"zh-Hans": LangZhHans,
	"zh-Hant": LangZhHant,
	"ja":      LangJa,
}

// ParseLang attempts to convert a string to a Lang.
func ParseLang(name string) (Lang, error) {
	if x, ok := _LangValue[name]; ok {
		return x, nil
	}
	return Lang(""), fmt.Errorf("%s is %w", name, ErrInvalidLang)
}

func (x Lang) I18nID() string {
	return fmt.Sprintf("Lang_%s", x.String())
}

var _LangTextMap = map[Lang]string{
	LangEn:     "English",
	LangZhHans: "简体中文",
	LangZhHant: "繁體中文",
	LangJa:     "日本語",
}

func (x Lang) Text(upCaseHead bool, i18nCustom *i18nc.I18nCustom) string {
	text := []rune(_LangTextMap[x])

	if i18nCustom != nil {
		if _, ok := i18nCustom.Configs[x.I18nID()]; ok {
			text = []rune(i18nCustom.MustLocalize(x.I18nID(), "", ""))
		}
	}

	var res string
	if upCaseHead {
		res = strings.ToUpper(string(text[:1])) + string(text[1:])
	} else {
		res = strings.ToLower(string(text[:1])) + string(text[1:])
	}
	return res
}

func LangAddI18nConfigs(ic *i18nc.I18nCustom) {
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "Lang_en",
		Other: "English",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "Lang_zh-Hans",
		Other: "简体中文",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "Lang_zh-Hant",
		Other: "繁體中文",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "Lang_ja",
		Other: "日本語",
	})
}
