// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"fmt"
	"strings"

	"github.com/nicksnyder/go-i18n/v2/i18n"
	i18nc "github.com/oodzchen/dproject/i18n"
)

const (
	// AppErrCodeAlreadyRegistered is a AppErrCode of type AlreadyRegistered.
	// already registered
	AppErrCodeAlreadyRegistered AppErrCode = iota + 1000
	// AppErrCodeNotRegistered is a AppErrCode of type NotRegistered.
	// not registered
	AppErrCodeNotRegistered
	// AppErrCodeUserValidFailed is a AppErrCode of type UserValidFailed.
	// user data validation failed
	AppErrCodeUserValidFailed
	// AppErrCodeArticleValidFailed is a AppErrCode of type ArticleValidFailed.
	// article data validation failed
	AppErrCodeArticleValidFailed
	// AppErrCodePermissionValidFailed is a AppErrCode of type PermissionValidFailed.
	// permission data validation failed
	AppErrCodePermissionValidFailed
	// AppErrCodeRoleValidFailed is a AppErrCode of type RoleValidFailed.
	// role data validation failed
	AppErrCodeRoleValidFailed
	// AppErrCodeActivityValidFailed is a AppErrCode of type ActivityValidFailed.
	// activity data validation failed
	AppErrCodeActivityValidFailed
	// AppErrCodeUserNotExist is a AppErrCode of type UserNotExist.
	// user dose not exist
	AppErrCodeUserNotExist
)

var ErrInvalidAppErrCode = fmt.Errorf("not a valid AppErrCode, try [%s]", strings.Join(_AppErrCodeNames, ", "))

const _AppErrCodeName = "AlreadyRegisteredNotRegisteredUserValidFailedArticleValidFailedPermissionValidFailedRoleValidFailedActivityValidFailedUserNotExist"

var _AppErrCodeNames = []string{
	_AppErrCodeName[0:17],
	_AppErrCodeName[17:30],
	_AppErrCodeName[30:45],
	_AppErrCodeName[45:63],
	_AppErrCodeName[63:84],
	_AppErrCodeName[84:99],
	_AppErrCodeName[99:118],
	_AppErrCodeName[118:130],
}

// AppErrCodeNames returns a list of possible string values of AppErrCode.
func AppErrCodeNames() []string {
	tmp := make([]string, len(_AppErrCodeNames))
	copy(tmp, _AppErrCodeNames)
	return tmp
}

// AppErrCodeValues returns a list of the values for AppErrCode
func AppErrCodeValues() []AppErrCode {
	return []AppErrCode{
		AppErrCodeAlreadyRegistered,
		AppErrCodeNotRegistered,
		AppErrCodeUserValidFailed,
		AppErrCodeArticleValidFailed,
		AppErrCodePermissionValidFailed,
		AppErrCodeRoleValidFailed,
		AppErrCodeActivityValidFailed,
		AppErrCodeUserNotExist,
	}
}

var _AppErrCodeMap = map[AppErrCode]string{
	AppErrCodeAlreadyRegistered:     _AppErrCodeName[0:17],
	AppErrCodeNotRegistered:         _AppErrCodeName[17:30],
	AppErrCodeUserValidFailed:       _AppErrCodeName[30:45],
	AppErrCodeArticleValidFailed:    _AppErrCodeName[45:63],
	AppErrCodePermissionValidFailed: _AppErrCodeName[63:84],
	AppErrCodeRoleValidFailed:       _AppErrCodeName[84:99],
	AppErrCodeActivityValidFailed:   _AppErrCodeName[99:118],
	AppErrCodeUserNotExist:          _AppErrCodeName[118:130],
}

// String implements the Stringer interface.
func (x AppErrCode) String() string {
	if str, ok := _AppErrCodeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("AppErrCode(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AppErrCode) IsValid() bool {
	_, ok := _AppErrCodeMap[x]
	return ok
}

var _AppErrCodeValue = map[string]AppErrCode{
	_AppErrCodeName[0:17]:    AppErrCodeAlreadyRegistered,
	_AppErrCodeName[17:30]:   AppErrCodeNotRegistered,
	_AppErrCodeName[30:45]:   AppErrCodeUserValidFailed,
	_AppErrCodeName[45:63]:   AppErrCodeArticleValidFailed,
	_AppErrCodeName[63:84]:   AppErrCodePermissionValidFailed,
	_AppErrCodeName[84:99]:   AppErrCodeRoleValidFailed,
	_AppErrCodeName[99:118]:  AppErrCodeActivityValidFailed,
	_AppErrCodeName[118:130]: AppErrCodeUserNotExist,
}

// ParseAppErrCode attempts to convert a string to a AppErrCode.
func ParseAppErrCode(name string) (AppErrCode, error) {
	if x, ok := _AppErrCodeValue[name]; ok {
		return x, nil
	}
	return AppErrCode(0), fmt.Errorf("%s is %w", name, ErrInvalidAppErrCode)
}

var (
	AppErrAlreadyRegistered     = NewAppError(AppErrCodeAlreadyRegistered)
	AppErrNotRegistered         = NewAppError(AppErrCodeNotRegistered)
	AppErrUserValidFailed       = NewAppError(AppErrCodeUserValidFailed)
	AppErrArticleValidFailed    = NewAppError(AppErrCodeArticleValidFailed)
	AppErrPermissionValidFailed = NewAppError(AppErrCodePermissionValidFailed)
	AppErrRoleValidFailed       = NewAppError(AppErrCodeRoleValidFailed)
	AppErrActivityValidFailed   = NewAppError(AppErrCodeActivityValidFailed)
	AppErrUserNotExist          = NewAppError(AppErrCodeUserNotExist)
)

func (x AppErrCode) I18nID() string {
	return fmt.Sprintf("AppErrCode_%s", x.String())
}

var _AppErrCodeTextMap = map[AppErrCode]string{
	AppErrCodeAlreadyRegistered:     "already registered",
	AppErrCodeNotRegistered:         "not registered",
	AppErrCodeUserValidFailed:       "user data validation failed",
	AppErrCodeArticleValidFailed:    "article data validation failed",
	AppErrCodePermissionValidFailed: "permission data validation failed",
	AppErrCodeRoleValidFailed:       "role data validation failed",
	AppErrCodeActivityValidFailed:   "activity data validation failed",
	AppErrCodeUserNotExist:          "user dose not exist",
}

func (x AppErrCode) Text(upCaseHead bool, i18nCustom *i18nc.I18nCustom) string {
	text := []rune(_AppErrCodeTextMap[x])

	if i18nCustom != nil {
		if _, ok := i18nCustom.Configs[x.I18nID()]; ok {
			text = []rune(i18nCustom.MustLocalize(x.I18nID(), "", ""))
		}
	}

	var res string
	if upCaseHead {
		res = strings.ToUpper(string(text[:1])) + string(text[1:])
	} else {
		res = strings.ToLower(string(text[:1])) + string(text[1:])
	}
	return res
}

func AppErrCodeAddI18nConfigs(ic *i18nc.I18nCustom) {
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppErrCode_AlreadyRegistered",
		Other: "already registered",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppErrCode_NotRegistered",
		Other: "not registered",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppErrCode_UserValidFailed",
		Other: "user data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppErrCode_ArticleValidFailed",
		Other: "article data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppErrCode_PermissionValidFailed",
		Other: "permission data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppErrCode_RoleValidFailed",
		Other: "role data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppErrCode_ActivityValidFailed",
		Other: "activity data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppErrCode_UserNotExist",
		Other: "user dose not exist",
	})
}
