// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"fmt"
	"strings"

	"github.com/nicksnyder/go-i18n/v2/i18n"
	i18nc "github.com/oodzchen/dproject/i18n"
)

const (
	// AppErrorAlreadyRegistered is a AppError of type AlreadyRegistered.
	// already registered
	AppErrorAlreadyRegistered AppError = iota + 1000
	// AppErrorNotRegistered is a AppError of type NotRegistered.
	// not registered
	AppErrorNotRegistered
	// AppErrorUserValidFailed is a AppError of type UserValidFailed.
	// user data validation failed
	AppErrorUserValidFailed
	// AppErrorArticleValidFailed is a AppError of type ArticleValidFailed.
	// article data validation failed
	AppErrorArticleValidFailed
	// AppErrorPermissionValidFailed is a AppError of type PermissionValidFailed.
	// permission data validation failed
	AppErrorPermissionValidFailed
	// AppErrorRoleValidFailed is a AppError of type RoleValidFailed.
	// role data validation failed
	AppErrorRoleValidFailed
	// AppErrorActivityValidFailed is a AppError of type ActivityValidFailed.
	// activity data validation failed
	AppErrorActivityValidFailed
	// AppErrorUserNotExist is a AppError of type UserNotExist.
	// user dose not exist
	AppErrorUserNotExist
)

var ErrInvalidAppError = fmt.Errorf("not a valid AppError, try [%s]", strings.Join(_AppErrorNames, ", "))

const _AppErrorName = "AlreadyRegisteredNotRegisteredUserValidFailedArticleValidFailedPermissionValidFailedRoleValidFailedActivityValidFailedUserNotExist"

var _AppErrorNames = []string{
	_AppErrorName[0:17],
	_AppErrorName[17:30],
	_AppErrorName[30:45],
	_AppErrorName[45:63],
	_AppErrorName[63:84],
	_AppErrorName[84:99],
	_AppErrorName[99:118],
	_AppErrorName[118:130],
}

// AppErrorNames returns a list of possible string values of AppError.
func AppErrorNames() []string {
	tmp := make([]string, len(_AppErrorNames))
	copy(tmp, _AppErrorNames)
	return tmp
}

// AppErrorValues returns a list of the values for AppError
func AppErrorValues() []AppError {
	return []AppError{
		AppErrorAlreadyRegistered,
		AppErrorNotRegistered,
		AppErrorUserValidFailed,
		AppErrorArticleValidFailed,
		AppErrorPermissionValidFailed,
		AppErrorRoleValidFailed,
		AppErrorActivityValidFailed,
		AppErrorUserNotExist,
	}
}

var _AppErrorMap = map[AppError]string{
	AppErrorAlreadyRegistered:     _AppErrorName[0:17],
	AppErrorNotRegistered:         _AppErrorName[17:30],
	AppErrorUserValidFailed:       _AppErrorName[30:45],
	AppErrorArticleValidFailed:    _AppErrorName[45:63],
	AppErrorPermissionValidFailed: _AppErrorName[63:84],
	AppErrorRoleValidFailed:       _AppErrorName[84:99],
	AppErrorActivityValidFailed:   _AppErrorName[99:118],
	AppErrorUserNotExist:          _AppErrorName[118:130],
}

// String implements the Stringer interface.
func (x AppError) String() string {
	if str, ok := _AppErrorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("AppError(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AppError) IsValid() bool {
	_, ok := _AppErrorMap[x]
	return ok
}

var _AppErrorValue = map[string]AppError{
	_AppErrorName[0:17]:    AppErrorAlreadyRegistered,
	_AppErrorName[17:30]:   AppErrorNotRegistered,
	_AppErrorName[30:45]:   AppErrorUserValidFailed,
	_AppErrorName[45:63]:   AppErrorArticleValidFailed,
	_AppErrorName[63:84]:   AppErrorPermissionValidFailed,
	_AppErrorName[84:99]:   AppErrorRoleValidFailed,
	_AppErrorName[99:118]:  AppErrorActivityValidFailed,
	_AppErrorName[118:130]: AppErrorUserNotExist,
}

// ParseAppError attempts to convert a string to a AppError.
func ParseAppError(name string) (AppError, error) {
	if x, ok := _AppErrorValue[name]; ok {
		return x, nil
	}
	return AppError(0), fmt.Errorf("%s is %w", name, ErrInvalidAppError)
}

func (x AppError) I18nID() string {
	return fmt.Sprintf("AppError_%s", x.String())
}

var _AppErrorTextMap = map[AppError]string{
	AppErrorAlreadyRegistered:     "already registered",
	AppErrorNotRegistered:         "not registered",
	AppErrorUserValidFailed:       "user data validation failed",
	AppErrorArticleValidFailed:    "article data validation failed",
	AppErrorPermissionValidFailed: "permission data validation failed",
	AppErrorRoleValidFailed:       "role data validation failed",
	AppErrorActivityValidFailed:   "activity data validation failed",
	AppErrorUserNotExist:          "user dose not exist",
}

func (x AppError) Text(upCaseHead bool, i18nCustom *i18nc.I18nCustom) string {
	// fmt.Println("translator: ", translator)
	// fmt.Println("AppError.Text: ", int(x))

	if _, ok := _AppErrorTextMap[x]; !ok {
		return ""
	}

	text := []rune(_AppErrorTextMap[x])

	// fmt.Println("text: ", text)
	// fmt.Println("i18nID: ", x.I18nID())

	if i18nCustom != nil {
		if _, ok := i18nCustom.Configs[x.I18nID()]; ok {
			text = []rune(i18nCustom.MustLocalize(x.I18nID(), "", ""))
		}
	}

	var res string
	if upCaseHead {
		res = strings.ToUpper(string(text[:1])) + string(text[1:])
	} else {
		res = strings.ToLower(string(text[:1])) + string(text[1:])
	}
	return res
}

func AppErrorAddI18nConfigs(ic *i18nc.I18nCustom) {
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppError_AlreadyRegistered",
		Other: "already registered",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppError_NotRegistered",
		Other: "not registered",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppError_UserValidFailed",
		Other: "user data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppError_ArticleValidFailed",
		Other: "article data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppError_PermissionValidFailed",
		Other: "permission data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppError_RoleValidFailed",
		Other: "role data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppError_ActivityValidFailed",
		Other: "activity data validation failed",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AppError_UserNotExist",
		Other: "user dose not exist",
	})
}
