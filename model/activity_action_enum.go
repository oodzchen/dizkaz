// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"fmt"
	"strings"
)

const (
	// AcActionRegister is a AcAction of type register.
	// Register
	AcActionRegister AcAction = "register"
	// AcActionLogin is a AcAction of type login.
	// Login
	AcActionLogin AcAction = "login"
	// AcActionLogout is a AcAction of type logout.
	// Logout
	AcActionLogout AcAction = "logout"
	// AcActionUpdateIntro is a AcAction of type update_intro.
	// Update introduction
	AcActionUpdateIntro AcAction = "update_intro"
	// AcActionCreateArticle is a AcAction of type create_article.
	// Create article
	AcActionCreateArticle AcAction = "create_article"
	// AcActionReplyArticle is a AcAction of type reply_article.
	// Reply to article
	AcActionReplyArticle AcAction = "reply_article"
	// AcActionEditArticle is a AcAction of type edit_article.
	// Edit article
	AcActionEditArticle AcAction = "edit_article"
	// AcActionDeleteArticle is a AcAction of type delete_article.
	// Delete article
	AcActionDeleteArticle AcAction = "delete_article"
	// AcActionSaveArticle is a AcAction of type save_article.
	// Save article
	AcActionSaveArticle AcAction = "save_article"
	// AcActionVoteArticle is a AcAction of type vote_article.
	// Vote article
	AcActionVoteArticle AcAction = "vote_article"
	// AcActionReactArticle is a AcAction of type react_article.
	// React to article
	AcActionReactArticle AcAction = "react_article"
	// AcActionSetRole is a AcAction of type set_role.
	// Set role
	AcActionSetRole AcAction = "set_role"
	// AcActionAddRole is a AcAction of type add_role.
	// Add role
	AcActionAddRole AcAction = "add_role"
	// AcActionEditRole is a AcAction of type edit_role.
	// Edit role
	AcActionEditRole AcAction = "edit_role"
)

var ErrInvalidAcAction = fmt.Errorf("not a valid AcAction, try [%s]", strings.Join(_AcActionNames, ", "))

var _AcActionNames = []string{
	string(AcActionRegister),
	string(AcActionLogin),
	string(AcActionLogout),
	string(AcActionUpdateIntro),
	string(AcActionCreateArticle),
	string(AcActionReplyArticle),
	string(AcActionEditArticle),
	string(AcActionDeleteArticle),
	string(AcActionSaveArticle),
	string(AcActionVoteArticle),
	string(AcActionReactArticle),
	string(AcActionSetRole),
	string(AcActionAddRole),
	string(AcActionEditRole),
}

// AcActionNames returns a list of possible string values of AcAction.
func AcActionNames() []string {
	tmp := make([]string, len(_AcActionNames))
	copy(tmp, _AcActionNames)
	return tmp
}

// AcActionValues returns a list of the values for AcAction
func AcActionValues() []AcAction {
	return []AcAction{
		AcActionRegister,
		AcActionLogin,
		AcActionLogout,
		AcActionUpdateIntro,
		AcActionCreateArticle,
		AcActionReplyArticle,
		AcActionEditArticle,
		AcActionDeleteArticle,
		AcActionSaveArticle,
		AcActionVoteArticle,
		AcActionReactArticle,
		AcActionSetRole,
		AcActionAddRole,
		AcActionEditRole,
	}
}

// String implements the Stringer interface.
func (x AcAction) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AcAction) IsValid() bool {
	_, err := ParseAcAction(string(x))
	return err == nil
}

var _AcActionValue = map[string]AcAction{
	"register":       AcActionRegister,
	"login":          AcActionLogin,
	"logout":         AcActionLogout,
	"update_intro":   AcActionUpdateIntro,
	"create_article": AcActionCreateArticle,
	"reply_article":  AcActionReplyArticle,
	"edit_article":   AcActionEditArticle,
	"delete_article": AcActionDeleteArticle,
	"save_article":   AcActionSaveArticle,
	"vote_article":   AcActionVoteArticle,
	"react_article":  AcActionReactArticle,
	"set_role":       AcActionSetRole,
	"add_role":       AcActionAddRole,
	"edit_role":      AcActionEditRole,
}

// ParseAcAction attempts to convert a string to a AcAction.
func ParseAcAction(name string) (AcAction, error) {
	if x, ok := _AcActionValue[name]; ok {
		return x, nil
	}
	return AcAction(""), fmt.Errorf("%s is %w", name, ErrInvalidAcAction)
}

var _AcActionTextMap = map[AcAction]string{
	AcActionRegister:      "Register",
	AcActionLogin:         "Login",
	AcActionLogout:        "Logout",
	AcActionUpdateIntro:   "Update introduction",
	AcActionCreateArticle: "Create article",
	AcActionReplyArticle:  "Reply to article",
	AcActionEditArticle:   "Edit article",
	AcActionDeleteArticle: "Delete article",
	AcActionSaveArticle:   "Save article",
	AcActionVoteArticle:   "Vote article",
	AcActionReactArticle:  "React to article",
	AcActionSetRole:       "Set role",
	AcActionAddRole:       "Add role",
	AcActionEditRole:      "Edit role",
}

func (x AcAction) Text(upCaseHead bool) string {
	text := _AcActionTextMap[x]
	if upCaseHead {
		text = strings.ToUpper(text[:1]) + text[1:]
	} else {
		text = strings.ToLower(text[:1]) + text[1:]
	}
	return text
}
