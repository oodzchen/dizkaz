// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"fmt"
	"strings"

	"github.com/nicksnyder/go-i18n/v2/i18n"
	i18nc "github.com/oodzchen/dproject/i18n"
)

const (
	// AcActionRegister is a AcAction of type register.
	// Register
	AcActionRegister AcAction = "register"
	// AcActionRegisterVerify is a AcAction of type register_verify.
	// Registration verification
	AcActionRegisterVerify AcAction = "register_verify"
	// AcActionLogin is a AcAction of type login.
	// Login
	AcActionLogin AcAction = "login"
	// AcActionLogout is a AcAction of type logout.
	// Logout
	AcActionLogout AcAction = "logout"
	// AcActionUpdateIntro is a AcAction of type update_intro.
	// Update introduction
	AcActionUpdateIntro AcAction = "update_intro"
	// AcActionCreateArticle is a AcAction of type create_article.
	// Create article
	AcActionCreateArticle AcAction = "create_article"
	// AcActionReplyArticle is a AcAction of type reply_article.
	// Reply to article
	AcActionReplyArticle AcAction = "reply_article"
	// AcActionEditArticle is a AcAction of type edit_article.
	// Edit article
	AcActionEditArticle AcAction = "edit_article"
	// AcActionDeleteArticle is a AcAction of type delete_article.
	// Delete article
	AcActionDeleteArticle AcAction = "delete_article"
	// AcActionSaveArticle is a AcAction of type save_article.
	// Save article
	AcActionSaveArticle AcAction = "save_article"
	// AcActionVoteArticle is a AcAction of type vote_article.
	// Vote article
	AcActionVoteArticle AcAction = "vote_article"
	// AcActionReactArticle is a AcAction of type react_article.
	// React to article
	AcActionReactArticle AcAction = "react_article"
	// AcActionSetRole is a AcAction of type set_role.
	// Set role
	AcActionSetRole AcAction = "set_role"
	// AcActionAddRole is a AcAction of type add_role.
	// Add role
	AcActionAddRole AcAction = "add_role"
	// AcActionEditRole is a AcAction of type edit_role.
	// Edit role
	AcActionEditRole AcAction = "edit_role"
	// AcActionSubscribeArticle is a AcAction of type subscribe_article.
	// Subscribe article
	AcActionSubscribeArticle AcAction = "subscribe_article"
	// AcActionRetrievePassword is a AcAction of type retrieve_password.
	// Retrieve password
	AcActionRetrievePassword AcAction = "retrieve_password"
	// AcActionResetPassword is a AcAction of type reset_password.
	// Reset password
	AcActionResetPassword AcAction = "reset_password"
	// AcActionToggleHideHistory is a AcAction of type toggle_hide_history.
	// Toggle hide history
	AcActionToggleHideHistory AcAction = "toggle_hide_history"
)

var ErrInvalidAcAction = fmt.Errorf("not a valid AcAction, try [%s]", strings.Join(_AcActionNames, ", "))

var _AcActionNames = []string{
	string(AcActionRegister),
	string(AcActionRegisterVerify),
	string(AcActionLogin),
	string(AcActionLogout),
	string(AcActionUpdateIntro),
	string(AcActionCreateArticle),
	string(AcActionReplyArticle),
	string(AcActionEditArticle),
	string(AcActionDeleteArticle),
	string(AcActionSaveArticle),
	string(AcActionVoteArticle),
	string(AcActionReactArticle),
	string(AcActionSetRole),
	string(AcActionAddRole),
	string(AcActionEditRole),
	string(AcActionSubscribeArticle),
	string(AcActionRetrievePassword),
	string(AcActionResetPassword),
	string(AcActionToggleHideHistory),
}

// AcActionNames returns a list of possible string values of AcAction.
func AcActionNames() []string {
	tmp := make([]string, len(_AcActionNames))
	copy(tmp, _AcActionNames)
	return tmp
}

// AcActionValues returns a list of the values for AcAction
func AcActionValues() []AcAction {
	return []AcAction{
		AcActionRegister,
		AcActionRegisterVerify,
		AcActionLogin,
		AcActionLogout,
		AcActionUpdateIntro,
		AcActionCreateArticle,
		AcActionReplyArticle,
		AcActionEditArticle,
		AcActionDeleteArticle,
		AcActionSaveArticle,
		AcActionVoteArticle,
		AcActionReactArticle,
		AcActionSetRole,
		AcActionAddRole,
		AcActionEditRole,
		AcActionSubscribeArticle,
		AcActionRetrievePassword,
		AcActionResetPassword,
		AcActionToggleHideHistory,
	}
}

// String implements the Stringer interface.
func (x AcAction) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AcAction) IsValid() bool {
	_, err := ParseAcAction(string(x))
	return err == nil
}

var _AcActionValue = map[string]AcAction{
	"register":            AcActionRegister,
	"register_verify":     AcActionRegisterVerify,
	"login":               AcActionLogin,
	"logout":              AcActionLogout,
	"update_intro":        AcActionUpdateIntro,
	"create_article":      AcActionCreateArticle,
	"reply_article":       AcActionReplyArticle,
	"edit_article":        AcActionEditArticle,
	"delete_article":      AcActionDeleteArticle,
	"save_article":        AcActionSaveArticle,
	"vote_article":        AcActionVoteArticle,
	"react_article":       AcActionReactArticle,
	"set_role":            AcActionSetRole,
	"add_role":            AcActionAddRole,
	"edit_role":           AcActionEditRole,
	"subscribe_article":   AcActionSubscribeArticle,
	"retrieve_password":   AcActionRetrievePassword,
	"reset_password":      AcActionResetPassword,
	"toggle_hide_history": AcActionToggleHideHistory,
}

// ParseAcAction attempts to convert a string to a AcAction.
func ParseAcAction(name string) (AcAction, error) {
	if x, ok := _AcActionValue[name]; ok {
		return x, nil
	}
	return AcAction(""), fmt.Errorf("%s is %w", name, ErrInvalidAcAction)
}

func (x AcAction) I18nID() string {
	return fmt.Sprintf("AcAction_%s", x.String())
}

var _AcActionTextMap = map[AcAction]string{
	AcActionRegister:          "Register",
	AcActionRegisterVerify:    "Registration verification",
	AcActionLogin:             "Login",
	AcActionLogout:            "Logout",
	AcActionUpdateIntro:       "Update introduction",
	AcActionCreateArticle:     "Create article",
	AcActionReplyArticle:      "Reply to article",
	AcActionEditArticle:       "Edit article",
	AcActionDeleteArticle:     "Delete article",
	AcActionSaveArticle:       "Save article",
	AcActionVoteArticle:       "Vote article",
	AcActionReactArticle:      "React to article",
	AcActionSetRole:           "Set role",
	AcActionAddRole:           "Add role",
	AcActionEditRole:          "Edit role",
	AcActionSubscribeArticle:  "Subscribe article",
	AcActionRetrievePassword:  "Retrieve password",
	AcActionResetPassword:     "Reset password",
	AcActionToggleHideHistory: "Toggle hide history",
}

func (x AcAction) Text(upCaseHead bool, i18nCustom *i18nc.I18nCustom) string {
	text := []rune(_AcActionTextMap[x])

	if i18nCustom != nil {
		if _, ok := i18nCustom.Configs[x.I18nID()]; ok {
			text = []rune(i18nCustom.MustLocalize(x.I18nID(), "", ""))
		}
	}

	var res string
	if upCaseHead {
		res = strings.ToUpper(string(text[:1])) + string(text[1:])
	} else {
		res = strings.ToLower(string(text[:1])) + string(text[1:])
	}
	return res
}

func AcActionAddI18nConfigs(ic *i18nc.I18nCustom) {
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_register",
		Other: "Register",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_register_verify",
		Other: "Registration verification",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_login",
		Other: "Login",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_logout",
		Other: "Logout",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_update_intro",
		Other: "Update introduction",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_create_article",
		Other: "Create article",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_reply_article",
		Other: "Reply to article",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_edit_article",
		Other: "Edit article",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_delete_article",
		Other: "Delete article",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_save_article",
		Other: "Save article",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_vote_article",
		Other: "Vote article",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_react_article",
		Other: "React to article",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_set_role",
		Other: "Set role",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_add_role",
		Other: "Add role",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_edit_role",
		Other: "Edit role",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_subscribe_article",
		Other: "Subscribe article",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_retrieve_password",
		Other: "Retrieve password",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_reset_password",
		Other: "Reset password",
	})
	ic.AddLocalizeConfig(&i18n.Message{
		ID:    "AcAction_toggle_hide_history",
		Other: "Toggle hide history",
	})
}
